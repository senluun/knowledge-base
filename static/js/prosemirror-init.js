// Simple Rich Text Editor Initialization
// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –±–µ–∑ ProseMirror, –Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

function initProseMirror(widgetId) {
    const textarea = document.getElementById(widgetId);
    const editorContainer = document.getElementById(`editor-${widgetId}`);
    
    if (!textarea || !editorContainer) {
        console.error('Editor: Required elements not found');
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–Ω–æ–ø–∫—É –ø–ª—é—Å–∏–∫
    const plusButton = document.createElement('button');
    plusButton.id = `plus-${widgetId}`;
    plusButton.className = 'block-menu__plus non-removable';
    plusButton.title = '–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç';
    plusButton.style.position = 'absolute';
    plusButton.style.width = '24px';
    plusButton.style.height = '24px';
    plusButton.style.display = 'flex';
    plusButton.style.alignItems = 'center';
    plusButton.style.justifyContent = 'center';
    plusButton.style.background = 'white';
    plusButton.style.border = '1px solid #e1e5e9';
    plusButton.style.color = '#929ca5';
    plusButton.style.cursor = 'pointer';
    plusButton.style.zIndex = '1000';
    plusButton.style.opacity = '0.8';
    plusButton.style.borderRadius = '4px';
    plusButton.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';
    plusButton.style.pointerEvents = 'auto';
    plusButton.style.transition = 'opacity 0.2s ease';
    plusButton.style.visibility = 'hidden'; // –ù–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç
    
    plusButton.innerHTML = '<svg class="svg-icon" fill="currentColor" height="16" viewBox="0 0 24 24" width="16">' +
                           '<path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    editorContainer.parentNode.appendChild(plusButton);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
    editorContainer.innerHTML = textarea.value || '<p><br></p>';
    editorContainer.setAttribute('data-placeholder', '–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å... –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ / –¥–ª—è –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ +');
    editorContainer.setAttribute('contenteditable', 'true');
    
    // –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ /
    const commands = [
        { trigger: '/h1', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1', description: '–ë–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'H1', category: '–ó–∞–≥–æ–ª–æ–≤–∫–∏' },
        { trigger: '/h2', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2', description: '–°—Ä–µ–¥–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'H2', category: '–ó–∞–≥–æ–ª–æ–≤–∫–∏' },
        { trigger: '/h3', title: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3', description: '–ú–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫', icon: 'H3', category: '–ó–∞–≥–æ–ª–æ–≤–∫–∏' },
        { trigger: '/p', title: '–ü–∞—Ä–∞–≥—Ä–∞—Ñ', description: '–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç', icon: 'P', category: '–¢–µ–∫—Å—Ç' },
        { trigger: '/ul', title: '–°–ø–∏—Å–æ–∫', description: '–ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', icon: '‚Ä¢', category: '–°–ø–∏—Å–∫–∏' },
        { trigger: '/ol', title: '–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', description: '–ü—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫', icon: '1.', category: '–°–ø–∏—Å–∫–∏' },
        { trigger: '/code', title: '–ö–æ–¥-–±–ª–æ–∫', description: '–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º', icon: '&lt;/&gt;', category: '–ö–æ–¥' },
        { trigger: '/quote', title: '–¶–∏—Ç–∞—Ç–∞', description: '–ë–ª–æ–∫ —Ü–∏—Ç–∞—Ç—ã', icon: '"', category: '–¢–µ–∫—Å—Ç' },
        { trigger: '/bold', title: '–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç', description: '–í—ã–¥–µ–ª–∏—Ç—å –∂–∏—Ä–Ω—ã–º', icon: 'B', category: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
        { trigger: '/italic', title: '–ö—É—Ä—Å–∏–≤', description: '–í—ã–¥–µ–ª–∏—Ç—å –∫—É—Ä—Å–∏–≤–æ–º', icon: 'I', category: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
        { trigger: '/underline', title: '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π', description: '–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å —Ç–µ–∫—Å—Ç', icon: 'U', category: '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' },
        { trigger: '/image', title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', description: '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø–æ–¥–ø–∏—Å—å—é', icon: 'üñºÔ∏è', category: '–ú–µ–¥–∏–∞' },
        { trigger: '/gallery', title: '–ì–∞–ª–µ—Ä–µ—è', description: '–î–≤–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ä—è–¥–æ–º', icon: 'üñºÔ∏èüñºÔ∏è', category: '–ú–µ–¥–∏–∞' },
        { trigger: '/hr', title: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å', description: '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è', icon: '‚Äî', category: '–≠–ª–µ–º–µ–Ω—Ç—ã' },
        { trigger: '/link', title: '–°—Å—ã–ª–∫–∞', description: '–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É', icon: 'üîó', category: '–≠–ª–µ–º–µ–Ω—Ç—ã' },
        { trigger: '/info', title: '–í—Ä–µ–∑–∫–∞: Info', description: '–°–∏–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—Ä–µ–∑–∫–∞', icon: '‚ÑπÔ∏è', category: '–í—Ä–µ–∑–∫–∏' },
        { trigger: '/success', title: '–í—Ä–µ–∑–∫–∞: Success', description: '–ó–µ–ª–µ–Ω–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –≤—Ä–µ–∑–∫–∞', icon: '‚úÖ', category: '–í—Ä–µ–∑–∫–∏' },
        { trigger: '/warning', title: '–í—Ä–µ–∑–∫–∞: Warning', description: '–ñ–µ–ª—Ç–∞—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∞—è –≤—Ä–µ–∑–∫–∞', icon: '‚ö†Ô∏è', category: '–í—Ä–µ–∑–∫–∏' },
        { trigger: '/danger', title: '–í—Ä–µ–∑–∫–∞: Danger', description: '–ö—Ä–∞—Å–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –≤—Ä–µ–∑–∫–∞', icon: '‚õî', category: '–í—Ä–µ–∑–∫–∏' },
        { trigger: '/table', title: '–¢–∞–±–ª–∏—Ü–∞ 2√ó2', description: '–ú–∏–Ω–∏-—Ç–∞–±–ª–∏—Ü–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º', icon: '‚ñ¶', category: '–¢–∞–±–ª–∏—Ü–∞' },
        { trigger: '/checklist', title: '–ß–µ–∫‚Äë–ª–∏—Å—Ç', description: '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏', icon: '‚òëÔ∏è', category: '–°–ø–∏—Å–∫–∏' },
    ];
    
    let commandMenu = null;
    let currentCommand = '';
    let selectedCommandIndex = 0;
    
    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
    let isCommandMenuOpen = false;
    let isProcessingCommand = false;
    let lastClickTime = 0;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ +
    if (plusButton) {
        plusButton.addEventListener('click', function(e) {
            e.preventDefault();
            e.stopPropagation();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–µ–±–∞—É–Ω—Å (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥–≤–æ–π–Ω—ã—Ö –∫–ª–∏–∫–æ–≤)
            const now = Date.now();
            if (now - lastClickTime < 500) {
                return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –º–µ–Ω–µ–µ 500–º—Å
            }
            lastClickTime = now;
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é
            if (isCommandMenuOpen || commandMenu || isProcessingCommand) {
                hideCommandMenu();
                return;
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            isCommandMenuOpen = true;
            isProcessingCommand = true;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            const selection = window.getSelection();
            if (selection.toString().trim()) {
                showCommandMenuForSelection();
            } else {
                showCommandMenu();
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            setTimeout(() => {
                isCommandMenuOpen = false;
                
                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    isProcessingCommand = false;
                }, 200);
            }, 300);
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ä—è–¥–æ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–æ–π
        editorContainer.addEventListener('mouseup', updatePlusButtonPosition);
        editorContainer.addEventListener('keyup', updatePlusButtonPosition);
        editorContainer.addEventListener('keydown', updatePlusButtonPosition);
        editorContainer.addEventListener('click', updatePlusButtonPosition);
        editorContainer.addEventListener('focus', updatePlusButtonPosition);
        editorContainer.addEventListener('input', updatePlusButtonPosition);
        editorContainer.addEventListener('scroll', updatePlusButtonPosition);
        window.addEventListener('scroll', updatePlusButtonPosition);
        window.addEventListener('resize', updatePlusButtonPosition);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        setInterval(updatePlusButtonPosition, 300);
        
        // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        setTimeout(updatePlusButtonPosition, 100);
        setTimeout(updatePlusButtonPosition, 500);
        setTimeout(updatePlusButtonPosition, 1000);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ +
    function updatePlusButtonPosition() {
        if (!plusButton) return;
        
        const selection = window.getSelection();
        if (!selection.rangeCount) return;
        
        const range = selection.getRangeAt(0);
        const rect = range.getBoundingClientRect();
        const editorRect = editorContainer.getBoundingClientRect();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
        const currentNode = range.startContainer;
        let currentParagraph = null;
        
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç p, div, li, h1-h6
        let node = currentNode;
        while (node && node !== editorContainer) {
            if (node.nodeType === 1) { // –≠–ª–µ–º–µ–Ω—Ç
                const tagName = node.tagName.toLowerCase();
                if (tagName === 'p' || tagName === 'div' || tagName === 'li' || 
                    (tagName[0] === 'h' && tagName.length === 2 && !isNaN(tagName[1]))) {
                    currentParagraph = node;
                    break;
                }
            }
            node = node.parentNode;
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        let cursorTop = rect.top - editorRect.top + editorContainer.scrollTop;
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if (currentParagraph) {
            const paragraphRect = currentParagraph.getBoundingClientRect();
            cursorTop = paragraphRect.top - editorRect.top + editorContainer.scrollTop;
            cursorTop += paragraphRect.height / 2 - 12; // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–∑–∏—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–∏–¥–∏–º–æ–π —á–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
        if (cursorTop < 0 || cursorTop > editorContainer.offsetHeight) {
            // –ï—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏, —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            plusButton.style.visibility = 'hidden';
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–∞ –æ—Ç –∫—É—Ä—Å–æ—Ä–∞, –Ω–æ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
        plusButton.style.top = `${cursorTop}px`;
        plusButton.style.left = '10px'; // –†–∞–∑–º–µ—â–∞–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã —Å–ª–µ–≤–∞
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –∫—É—Ä—Å–æ—Ä–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        plusButton.style.position = 'absolute';
        plusButton.style.background = '#ffffff';
        plusButton.style.boxShadow = '0 1px 3px rgba(0,0,0,0.15)';
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≥—Ä–∞–Ω–∏—Ü—ã —Å–ø—Ä–∞–≤–∞
        plusButton.style.borderRight = '2px solid #e1e5e9';
        plusButton.style.paddingRight = '5px';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
        plusButton.style.transition = 'top 0.15s ease, left 0.15s ease';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        plusButton.style.visibility = 'visible';
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    editorContainer.addEventListener('input', function() {
        updateTextarea(textarea, editorContainer);
        handleCommandInput();
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å—Ç–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    editorContainer.addEventListener('paste', function(e) {
        const items = e.clipboardData.items;
        for (let i = 0; i < items.length; i++) {
            if (items[i].type.indexOf('image') !== -1) {
                e.preventDefault();
                const file = items[i].getAsFile();
                insertImageFromFile(file, editorContainer);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    editorContainer.addEventListener('dragover', function(e) {
        e.preventDefault();
    });
    
    editorContainer.addEventListener('drop', function(e) {
        e.preventDefault();
        const files = e.dataTransfer.files;
        for (let i = 0; i < files.length; i++) {
            if (files[i].type.startsWith('image/')) {
                insertImageFromFile(files[i], editorContainer);
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞
    editorContainer.addEventListener('focus', function() {
        this.classList.add('focused');
    });
    
    editorContainer.addEventListener('blur', function() {
        this.classList.remove('focused');
        hideCommandMenu();
    });
    
    // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "/"
    let lastSlashKeyTime = 0;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    editorContainer.addEventListener('keydown', function(e) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ /
        if (e.key === '/') {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ /
            const now = Date.now();
            if (now - lastSlashKeyTime < 500 || isProcessingCommand) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 500–º—Å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
                // –∏–ª–∏ –µ—Å–ª–∏ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–æ–º–∞–Ω–¥–∞
                return;
            }
            lastSlashKeyTime = now;
            
            // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ –º–µ–Ω—é
            if (isCommandMenuOpen || commandMenu) {
                hideCommandMenu();
                return;
            }
            
            isProcessingCommand = true;
            setTimeout(() => {
                showCommandMenu();
                
                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    isProcessingCommand = false;
                }, 300);
            }, 10);
            return;
        }
        
        if (commandMenu) {
            if (e.key === 'ArrowDown') {
                e.preventDefault();
                selectedCommandIndex = Math.min(selectedCommandIndex + 1, commandMenu.children.length - 1);
                updateCommandMenuSelection();
                scrollToSelectedItem();
            } else if (e.key === 'ArrowUp') {
                e.preventDefault();
                selectedCommandIndex = Math.max(selectedCommandIndex - 1, 0);
                updateCommandMenuSelection();
                scrollToSelectedItem();
            } else if (e.key === 'Enter') {
                e.preventDefault();
                executeSelectedCommand();
            } else if (e.key === 'Escape') {
                e.preventDefault();
                hideCommandMenu();
            }
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ /
    function handleCommandInput() {
        if (isProcessingCommand) return; // –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        
        const selection = window.getSelection();
        if (selection.rangeCount === 0) return;
        
        const range = selection.getRangeAt(0);
        const text = editorContainer.textContent;
        const cursorPos = range.startOffset;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ
        const lineStart = text.lastIndexOf('\n', cursorPos - 1) + 1;
        const lineText = text.substring(lineStart, cursorPos);
        
        if (lineText.startsWith('/')) {
            // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            if (isCommandMenuOpen || commandMenu) {
                filterCommands(lineText);
                return;
            }
            
            currentCommand = lineText;
            isProcessingCommand = true;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é
            setTimeout(() => {
                showCommandMenu();
                filterCommands(lineText);
                
                // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
                setTimeout(() => {
                    isProcessingCommand = false;
                }, 300);
            }, 10);
        } else if (!lineText.includes('/')) {
            hideCommandMenu();
        }
    }
    
    function showCommandMenu() {
        if (commandMenu) return;
        
        commandMenu = document.createElement('div');
        commandMenu.className = 'command-menu';
        commandMenu.style.position = 'absolute';
        commandMenu.style.zIndex = '1000';
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
        const rect = editorContainer.getBoundingClientRect();
        commandMenu.style.left = '20px';
        commandMenu.style.top = '80px';
        
        editorContainer.appendChild(commandMenu);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        commands.forEach((cmd, index) => {
            const item = createCommandMenuItem(cmd, index);
            commandMenu.appendChild(item);
        });
        
        selectedCommandIndex = 0;
        updateCommandMenuSelection();
    }
    
    function showCommandMenuForSelection() {
        if (commandMenu) return;
        
        commandMenu = document.createElement('div');
        commandMenu.className = 'command-menu';
        commandMenu.style.position = 'absolute';
        commandMenu.style.zIndex = '1000';
        
        // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é
        const rect = editorContainer.getBoundingClientRect();
        commandMenu.style.left = '20px';
        commandMenu.style.top = '80px';
        
        editorContainer.appendChild(commandMenu);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        const formatCommands = commands.filter(cmd => 
            ['bold', 'italic', 'underline', 'code', 'link', 'info', 'success', 'warning', 'danger'].includes(cmd.trigger.replace('/', ''))
        );
        
        formatCommands.forEach((cmd, index) => {
            const item = createCommandMenuItem(cmd, index);
            commandMenu.appendChild(item);
        });
        
        selectedCommandIndex = 0;
        updateCommandMenuSelection();
    }
    
    function createCommandMenuItem(cmd, index) {
        const item = document.createElement('button');
        item.className = 'command-menu-item';
        item.setAttribute('data-command', cmd.trigger);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
        const isDarkTheme = document.documentElement.getAttribute('data-bs-theme') === 'dark';
        const descriptionColor = isDarkTheme ? '#f8f9fa' : '#333333';
        const titleColor = isDarkTheme ? '#ffffff' : '#212529';
        
        item.innerHTML = `
            <div class="command-menu-item-icon">${cmd.icon}</div>
            <div class="command-menu-item-content">
                <div class="command-menu-item-title" style="color: ${titleColor};">${cmd.title}</div>
                <div class="command-menu-item-description" style="color: ${descriptionColor}; font-weight: 500;">${cmd.description}</div>
            </div>
        `;
        
        item.addEventListener('click', function() {
            executeCommand(cmd);
        });
        
        return item;
    }
    
    function updateCommandMenuSelection() {
        if (!commandMenu) return;
        
        const items = commandMenu.querySelectorAll('.command-menu-item');
        items.forEach((item, index) => {
            if (index === selectedCommandIndex) {
                item.classList.add('selected');
            } else {
                item.classList.remove('selected');
            }
        });
    }
    
    function scrollToSelectedItem() {
        if (!commandMenu) return;
        
        const items = commandMenu.querySelectorAll('.command-menu-item');
        const selectedItem = items[selectedCommandIndex];
        
        if (selectedItem) {
            selectedItem.scrollIntoView({
                behavior: 'smooth',
                block: 'nearest'
            });
        }
    }
    
    function filterCommands(query) {
        if (!commandMenu) return;
        
        // –°–æ–∑–¥–∞–µ–º Set –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        const uniqueCommands = new Map();
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        const filteredCommands = commands.filter(cmd => 
            cmd.trigger.toLowerCase().includes(query.toLowerCase()) ||
            cmd.title.toLowerCase().includes(query.toLowerCase())
        );
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ trigger)
        filteredCommands.forEach(cmd => {
            if (!uniqueCommands.has(cmd.trigger)) {
                uniqueCommands.set(cmd.trigger, cmd);
            }
        });
        
        // –û—á–∏—â–∞–µ–º –º–µ–Ω—é
        commandMenu.innerHTML = '';
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
        Array.from(uniqueCommands.values()).forEach((cmd, index) => {
            const item = createCommandMenuItem(cmd, index);
            commandMenu.appendChild(item);
        });
        
        selectedCommandIndex = 0;
        updateCommandMenuSelection();
    }
    
    function executeSelectedCommand() {
        if (!commandMenu) return;
        
        const items = commandMenu.querySelectorAll('.command-menu-item');
        if (items[selectedCommandIndex]) {
            const cmd = commands.find(c => c.trigger === items[selectedCommandIndex].getAttribute('data-command'));
            if (cmd) {
                executeCommand(cmd);
            }
        }
    }
    
    function executeCommand(cmd) {
        hideCommandMenu();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –≤—ã–∑–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        showFunctionTooltip(cmd.title);
        
        const selection = window.getSelection();
        const selectedText = selection.toString().trim();
        
        switch (cmd.trigger) {
            case '/h1':
                insertHeading(1, selectedText);
                break;
            case '/h2':
                insertHeading(2, selectedText);
                break;
            case '/h3':
                insertHeading(3, selectedText);
                break;
            case '/p':
                insertParagraph(selectedText);
                break;
            case '/ul':
                insertBulletList(selectedText);
                break;
            case '/ol':
                insertOrderedList(selectedText);
                break;
            case '/code':
                insertCodeBlock();
                break;
            case '/quote':
                insertQuote(selectedText);
                break;
            case '/bold':
                formatText('bold', selectedText);
                break;
            case '/italic':
                formatText('italic', selectedText);
                break;
            case '/underline':
                formatText('underline', selectedText);
                break;
            case '/link':
                insertLink(selectedText);
                break;
            case '/hr':
                insertHorizontalRule();
                break;
            case '/image':
                insertImageContainer();
                break;
            case '/gallery':
                insertGallery();
                break;
            case '/info':
                insertCallout('info');
                break;
            case '/success':
                insertCallout('success');
                break;
            case '/warning':
                insertCallout('warning');
                break;
            case '/danger':
                insertCallout('danger');
                break;
            case '/table':
                insertTable();
                break;
            case '/checklist':
                insertChecklist();
                break;
        }
        
        updateTextarea(textarea, editorContainer);
    }
    
    function insertHeading(level, text) {
        const heading = document.createElement(`h${level}`);
        
        if (window.getSelection().toString() || text) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            heading.textContent = text || window.getSelection().toString();
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—É—Ä—Å–æ—Ä –≤–Ω—É—Ç—Ä–∏
            heading.innerHTML = '<br>';
        }
        
        if (window.getSelection().toString()) {
            replaceSelection(heading);
        } else {
            insertAtCursor(heading);
        }
        
        // –ü–æ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        setCaretToStart(heading);
    }
    
    function insertParagraph(text) {
        const p = document.createElement('p');
        
        if (window.getSelection().toString() || text) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            p.textContent = text || window.getSelection().toString();
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
            p.innerHTML = '<br>';
        }
        
        if (window.getSelection().toString()) {
            replaceSelection(p);
        } else {
            insertAtCursor(p);
        }
        
        // –ü–æ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
        setCaretToStart(p);
    }
    
    function insertBulletList(text) {
        const ul = document.createElement('ul');
        const li = document.createElement('li');
        
        if (window.getSelection().toString() || text) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            li.textContent = text || window.getSelection().toString();
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            li.innerHTML = '<br>';
        }
        
        ul.appendChild(li);
        
        if (window.getSelection().toString()) {
            replaceSelection(ul);
        } else {
            insertAtCursor(ul);
        }
        
        // –ü–æ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
        setCaretToStart(li);
    }
    
    function insertOrderedList(text) {
        const ol = document.createElement('ol');
        const li = document.createElement('li');
        
        if (window.getSelection().toString() || text) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            li.textContent = text || window.getSelection().toString();
        } else {
            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            li.innerHTML = '<br>';
        }
        
        ol.appendChild(li);
        
        if (window.getSelection().toString()) {
            replaceSelection(ol);
        } else {
            insertAtCursor(ol);
        }
        
        // –ü–æ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
        setCaretToStart(li);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É—Ä—Å–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    function setCaretToStart(element) {
        const range = document.createRange();
        const selection = window.getSelection();
        
        // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
        if (!element.firstChild) {
            const textNode = document.createTextNode('');
            element.appendChild(textNode);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞
        const firstTextNode = element.firstChild;
        if (firstTextNode.nodeType === Node.TEXT_NODE) {
            range.setStart(firstTextNode, 0);
        } else {
            range.setStart(element, 0);
        }
        range.collapse(true);
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        selection.removeAllRanges();
        selection.addRange(range);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–Ω–æ–ø–∫–∏ +
        setTimeout(() => {
            updatePlusButtonPosition();
        }, 50);
    }
    
    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ insertCodeBlock
    let isCodeBlockBeingInserted = false;
    
    function insertCodeBlock() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        if (isCodeBlockBeingInserted) {
            return;
        }
        
        isCodeBlockBeingInserted = true;
        
        const language = prompt('–Ø–∑—ã–∫ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, python, js):', 'text') || 'text';
        const wrapper = document.createElement('div');
        wrapper.className = 'pm-block pm-code';
        wrapper.innerHTML = `
            <div class="pm-code__header">
                <span class="pm-code__lang">${language}</span>
                <button type="button" class="pm-code__copy">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
            </div>
            <pre class="pm-code__body" contenteditable="true"><code class="language-${language}">/* –í–∞—à –∫–æ–¥ */</code></pre>
        `;
        wrapper.querySelector('.pm-code__copy').addEventListener('click', function() {
            const text = wrapper.querySelector('pre').innerText;
            navigator.clipboard.writeText(text);
            this.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ';
            setTimeout(()=> this.textContent='–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 1500);
        });
        insertAtCursor(wrapper);
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            isCodeBlockBeingInserted = false;
        }, 1000);
    }
    
    function insertQuote(text) {
        const blockquote = document.createElement('blockquote');
        blockquote.textContent = text || '–¶–∏—Ç–∞—Ç–∞';
        
        if (window.getSelection().toString()) {
            replaceSelection(blockquote);
        } else {
            insertAtCursor(blockquote);
        }
    }
    
    function formatText(format, text) {
        if (text) {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const span = document.createElement('span');
                
                switch (format) {
                    case 'bold':
                        span.innerHTML = `<strong>${text}</strong>`;
                        break;
                    case 'italic':
                        span.innerHTML = `<em>${text}</em>`;
                        break;
                    case 'underline':
                        span.innerHTML = `<u>${text}</u>`;
                        break;
                }
                
                range.deleteContents();
                range.insertNode(span);
                selection.removeAllRanges();
            }
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥
            const tag = format === 'bold' ? 'strong' : 
                       format === 'italic' ? 'em' : 'u';
            const element = document.createElement(tag);
            element.textContent = `–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç`;
            insertAtCursor(element);
        }
    }
    
    function insertLink(text) {
        const url = prompt('–í–≤–µ–¥–∏—Ç–µ URL:', 'https://');
        if (url) {
            const a = document.createElement('a');
            a.href = url;
            a.textContent = text || url;
            a.target = '_blank';
            
            if (window.getSelection().toString()) {
                replaceSelection(a);
            } else {
                insertAtCursor(a);
            }
        }
    }
    
    function insertHorizontalRule() {
        const hr = document.createElement('hr');
        insertAtCursor(hr);
    }
    
    function insertImage() {
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = function(e) {
            const file = e.target.files[0];
            if (file) {
                insertImageFromFile(file, editorContainer);
            }
        };
        input.click();
    }

    // –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ insertImageContainer
    let isImageContainerBeingInserted = false;
    
    function insertImageContainer() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        if (isImageContainerBeingInserted) {
            return;
        }
        
        isImageContainerBeingInserted = true;
        
        const container = document.createElement('figure');
        container.className = 'pm-block pm-image';
        container.innerHTML = `
            <div class="pm-image__holder" contenteditable="false">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Ä¶</div>
            <figcaption class="pm-image__caption" contenteditable="true">–ü–æ–¥–ø–∏—Å—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é</figcaption>
        `;
        insertAtCursor(container);
        // —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        const input = document.createElement('input');
        input.type = 'file';
        input.accept = 'image/*';
        input.onchange = (e)=>{
            const file = e.target.files[0];
            if (!file) return;
            const reader = new FileReader();
            reader.onload = (ev)=>{
                const img = new Image();
                img.src = ev.target.result;
                img.alt = 'image';
                container.querySelector('.pm-image__holder').innerHTML = '';
                container.querySelector('.pm-image__holder').appendChild(img);
            };
            reader.readAsDataURL(file);
        };
        input.click();
        
        // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            isImageContainerBeingInserted = false;
        }, 1000);
    }

    function insertGallery() {
        const gallery = document.createElement('div');
        gallery.className = 'pm-block pm-gallery';
        gallery.innerHTML = `
            <div class="pm-gallery__item" contenteditable="false"></div>
            <div class="pm-gallery__item" contenteditable="false"></div>
            <div class="pm-gallery__hint">–î–æ–±–∞–≤—å—Ç–µ –¥–≤–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏</div>
        `;
        insertAtCursor(gallery);
    }

    function insertCallout(kind) {
        const callout = document.createElement('div');
        callout.className = `pm-block pm-callout pm-callout--${kind}`;
        callout.setAttribute('contenteditable','false');
        callout.innerHTML = `
            <div class="pm-callout__icon"></div>
            <div class="pm-callout__content" contenteditable="true">–¢–µ–∫—Å—Ç –≤—Ä–µ–∑–∫–∏ (${kind})</div>
        `;
        insertAtCursor(callout);
    }

    function insertTable() {
        const table = document.createElement('div');
        table.className = 'pm-block pm-table';
        table.innerHTML = `
            <table>
                <thead>
                    <tr><th>–ö–æ–ª–æ–Ω–∫–∞ 1</th><th>–ö–æ–ª–æ–Ω–∫–∞ 2</th></tr>
                </thead>
                <tbody>
                    <tr><td>–Ø—á–µ–π–∫–∞</td><td>–Ø—á–µ–π–∫–∞</td></tr>
                </tbody>
            </table>`;
        insertAtCursor(table);
    }

    function insertChecklist() {
        const list = document.createElement('ul');
        list.className = 'pm-block pm-checklist';
        list.innerHTML = `
            <li><label><input type="checkbox"> –ó–∞–¥–∞—á–∞ 1</label></li>
            <li><label><input type="checkbox"> –ó–∞–¥–∞—á–∞ 2</label></li>
        `;
        insertAtCursor(list);
    }
    
    function insertImageFromFile(file, container) {
        const reader = new FileReader();
        reader.onload = function(e) {
            const img = document.createElement('img');
            img.src = e.target.result;
            img.style.maxWidth = '100%';
            img.style.height = 'auto';
            img.style.display = 'block';
            img.style.margin = '1em auto';
            img.style.borderRadius = '8px';
            img.style.boxShadow = '0 4px 12px rgba(0, 0, 0, 0.1)';
            
            insertAtCursor(img);
            updateTextarea(textarea, container);
        };
        reader.readAsDataURL(file);
    }
    
    function insertAtCursor(element) {
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            range.insertNode(element);
            range.setStartAfter(element);
            range.setEndAfter(element);
            selection.removeAllRanges();
            selection.addRange(range);
        } else {
            editorContainer.appendChild(element);
        }
    }
    
    function replaceSelection(element) {
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            range.deleteContents();
            range.insertNode(element);
            range.setStartAfter(element);
            range.setEndAfter(element);
            selection.removeAllRanges();
            selection.addRange(range);
        }
    }
    
    function hideCommandMenu() {
        if (commandMenu) {
            commandMenu.remove();
            commandMenu = null;
            isCommandMenuOpen = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
            
            // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
            setTimeout(() => {
                isProcessingCommand = false;
            }, 200);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –≤—ã–∑–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    function showFunctionTooltip(functionName) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        const existingTooltip = editorContainer.querySelector('.function-tooltip');
        if (existingTooltip) {
            existingTooltip.remove();
        }
        
        // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        const tooltip = document.createElement('span');
        tooltip.className = 'function-tooltip';
        tooltip.textContent = `// –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: ${functionName}`;
        tooltip.style.color = '#6c757d';
        tooltip.style.fontStyle = 'italic';
        tooltip.style.fontSize = '0.9em';
        tooltip.style.opacity = '0.7';
        tooltip.contentEditable = 'false';
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        const selection = window.getSelection();
        if (selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            const currentNode = range.startContainer;
            let currentElement = currentNode;
            
            // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç p, div, h1-h6
            while (currentElement && currentElement !== editorContainer) {
                if (currentElement.nodeType === 1) {
                    const tagName = currentElement.tagName.toLowerCase();
                    if (tagName === 'p' || tagName === 'div' || tagName === 'li' || 
                        (tagName[0] === 'h' && tagName.length === 2 && !isNaN(tagName[1]))) {
                        break;
                    }
                }
                currentElement = currentElement.parentNode;
            }
            
            if (currentElement) {
                // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ –Ω–∞—á–∞–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                currentElement.insertBefore(tooltip, currentElement.firstChild);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                const space = document.createTextNode(' ');
                currentElement.insertBefore(space, tooltip.nextSibling);
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
                const newRange = document.createRange();
                newRange.setStartAfter(space);
                newRange.collapse(true);
                selection.removeAllRanges();
                selection.addRange(newRange);
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–∞–±–æ—Ä–∞
        const removeTooltip = () => {
            if (tooltip.parentNode) {
                tooltip.remove();
            }
        };
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞
        editorContainer.addEventListener('input', removeTooltip, { once: true });
        editorContainer.addEventListener('keydown', removeTooltip, { once: true });
    }
    
    function updateTextarea(textarea, editor) {
        enhanceVisualFeedback(editor);
        textarea.value = editor.innerHTML;
        const event = new Event('change', { bubbles: true });
        textarea.dispatchEvent(event);
        const inputEvent = new Event('input', { bubbles: true });
        textarea.dispatchEvent(inputEvent);
    }
    
    function enhanceVisualFeedback(editor) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
        const isDarkTheme = document.documentElement.getAttribute('data-bs-theme') === 'dark';
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∂–∏—Ä–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É
        const boldElements = editor.querySelectorAll('strong, b');
        boldElements.forEach(el => {
            el.style.fontWeight = '600';
            el.style.color = isDarkTheme ? '#f8f9fa' : 'inherit';
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫—É—Ä—Å–∏–≤—É
        const italicElements = editor.querySelectorAll('em, i');
        italicElements.forEach(el => {
            el.style.fontStyle = 'italic';
            el.style.color = isDarkTheme ? '#f8f9fa' : 'inherit';
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç–æ–º—É —Ç–µ–∫—Å—Ç—É
        const underlineElements = editor.querySelectorAll('u');
        underlineElements.forEach(el => {
            el.style.textDecoration = 'underline';
            el.style.textDecorationColor = '#007bff';
            el.style.textDecorationThickness = '2px';
            el.style.textUnderlineOffset = '2px';
            el.style.color = isDarkTheme ? '#f8f9fa' : 'inherit';
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –∫–æ–¥—É
        const codeElements = editor.querySelectorAll('code');
        codeElements.forEach(el => {
            if (isDarkTheme) {
                el.style.background = '#343a40';
                el.style.color = '#ffc107';
                el.style.border = '1px solid #495057';
            } else {
                el.style.background = '#f1f3f4';
                el.style.color = '#e83e8c';
                el.style.border = '1px solid #e1e5e9';
            }
            el.style.padding = '0.2rem 0.4rem';
            el.style.borderRadius = '0.25rem';
            el.style.fontFamily = 'JetBrains Mono, monospace';
            el.style.fontSize = '0.9em';
            el.style.fontWeight = '500';
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ —Å—Å—ã–ª–∫–∞–º
        const linkElements = editor.querySelectorAll('a');
        linkElements.forEach(el => {
            el.style.color = '#007bff';
            el.style.textDecoration = 'none';
            el.style.borderBottom = '1px solid transparent';
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—â–∏–π —Ü–≤–µ—Ç –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –≤ —Ç–µ–º–Ω–æ–π —Ç–µ–º–µ
        if (isDarkTheme) {
            const allElements = editor.querySelectorAll('*');
            allElements.forEach(el => {
                if (!el.style.color || el.style.color === 'inherit') {
                    el.style.color = '#f8f9fa';
                }
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const editors = document.querySelectorAll('.prosemirror-editor');
    editors.forEach(editor => {
        const widgetId = editor.id.replace('editor-', '');
        if (typeof initProseMirror === 'function') {
            initProseMirror(widgetId);
            console.log('ProseMirror editor initialized');
        } else {
            console.error('initProseMirror function not found');
        }
    });
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ +
    document.addEventListener('keydown', function(e) {
        const selection = window.getSelection();
        if (selection && selection.rangeCount > 0) {
            const range = selection.getRangeAt(0);
            const container = range.commonAncestorContainer;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞ –ª–∏ –∫–Ω–æ–ø–∫–∞ +
            const plusButtons = document.querySelectorAll('.block-menu__plus.non-removable');
            plusButtons.forEach(button => {
                if (container.contains(button) || button.contains(container)) {
                    // –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ + –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è, –æ—Ç–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    e.preventDefault();
                    range.collapse(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                    return false;
                }
            });
        }
    });
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ + –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞
    setInterval(function() {
        const editors = document.querySelectorAll('.prosemirror-editor-container');
        editors.forEach(editorContainer => {
            const editorId = editorContainer.querySelector('.prosemirror-editor').id;
            const plusId = editorId.replace('editor-', 'plus-');
            
            if (!document.getElementById(plusId)) {
                // –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
                const plusButton = document.createElement('button');
                plusButton.id = plusId;
                plusButton.className = 'block-menu__plus non-removable';
                plusButton.title = '–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç';
                plusButton.style = `position: absolute; left: -30px; transform: translateY(-50%); 
                                    width: 24px; height: 24px; display: flex; align-items: center; 
                                    justify-content: center; background: white; border: 1px solid #e1e5e9; 
                                    color: #929ca5; cursor: pointer; z-index: 1000; opacity: 0.8; 
                                    border-radius: 4px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); 
                                    pointer-events: auto !important;`;
                
                plusButton.innerHTML = '<svg class="svg-icon" fill="currentColor" height="16" viewBox="0 0 24 24" width="16">' +
                                       '<path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>';
                
                editorContainer.appendChild(plusButton);
                
                // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                const widgetId = editorId.replace('editor-', '');
                initProseMirror(widgetId);
            }
        });
    }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
});